{"version":3,"sources":["../lib/Interface.js"],"names":[],"mappings":";;;;;AAAA;;;;;;AAEA;AACA;AACO,IAAM,oCAAc,SAAd,WAAc;AAAA,SAAW;AAAA,WAAgB,YAAM;AAC1D,aAAO,gBAAM,WAAN,CAAkB,eAAe,OAAf,CAAlB,EAA2C,YAA3C,CAAP;AACD,KAFqC;AAAA,GAAX;AAAA,CAApB;;AAIP;AACA;AACO,IAAM,gCAAY,SAAZ,SAAY;AAAA,SAAY;AAAA,WAAS,YAAM;AAClD,YAAM,SAAN,CAAgB,QAAhB;AACA,aAAO,EAAP;AACD,KAHoC;AAAA,GAAZ;AAAA,CAAlB;;AAKP;AACA;AACA;AACO,IAAM,8BAAW,SAAX,QAAW;AAAA,SAAU;AAAA,WAAS,YAAM;AAC/C,UAAI,MAAJ,EAAY;AACV,eAAO,OAAO,MAAP,GACH,MAAM,QAAN,CAAe,OAAO,MAAtB,CADG,GAEH,MAAM,QAAN,CAAe,MAAf,CAFJ;AAGD;AACD,aAAO,EAAP;AACD,KAPiC;AAAA,GAAV;AAAA,CAAjB;;AASP;AACA;AACO,IAAM,8BAAW,SAAX,QAAW;AAAA,SAAS;AAAA,WAAM,MAAM,QAAN,EAAN;AAAA,GAAT;AAAA,CAAjB;;AAEP;AACA;AACO,IAAM,0CAAiB,SAAjB,cAAiB;AAAA,SAAS;AAAA,WAAe,YAAM;AAC1D,YAAM,cAAN,CAAqB,eAAe,WAAf,CAArB;AACD,KAFsC;AAAA,GAAT;AAAA,CAAvB;;AAIP;AACA;AACO,IAAM,4CAAkB,SAAlB,eAAkB;AAAA,SAAe;AAAA,WAAW;AAAA,aAAgB,YAAM;AAC7E,YAAM,MAAM,YAAY,GAAZ,CAAgB,iBAAhB,CAAZ;AACA,eAAO,gBAAM,WAAN,CACL,eAAe,OAAf,CADK,EAEL,YAFK,EAGL,gBAAM,eAAN,CAAsB,KAAtB,CAA4B,SAA5B,EAAuC,GAAvC,CAHK,CAAP;AAKD,OAPwD;AAAA,KAAX;AAAA,GAAf;AAAA,CAAxB;;AASP;AACA;AACO,IAAM,4CAAkB,SAAlB,eAAkB;AAAA,SAAY,YAAM;AAC/C,WAAO,gBAAM,eAAN,CAAsB,QAAtB,CAAP;AACD,GAF8B;AAAA,CAAxB;;AAIP,IAAM,iBAAiB,SAAjB,cAAiB;AAAA,SAAW,UAAC,CAAD,EAAI,CAAJ;AAAA,WAAU,QAAQ,CAAR,EAAW,CAAX,CAAV;AAAA,GAAX;AAAA,CAAvB;;AAEA;AACA;AACA;AACA;AACA,IAAM,mBAAmB,SAAnB,gBAAmB;AAAA,SAAQ;AAAA,WAAU;AAAA,aAAM,KAAK,MAAL,CAAN;AAAA,KAAV;AAAA,GAAR;AAAA,CAAzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAM,oBAAoB,SAApB,iBAAoB;AAAA,SAAc;AAAA,WAAS;AAAA,aAAQ,kBAAU;AACjE,eAAO,WAAW,KAAX,EAAkB,iBAAiB,IAAjB,CAAlB,EAA0C,MAA1C,GAAP;AACD,OAFgD;AAAA,KAAT;AAAA,GAAd;AAAA,CAA1B","file":"Interface.js","sourcesContent":["import Redux from 'redux'\n\n// `createStore` needs a 2-parameter, pure function for creating a new store.\n// The `initialState` can be used to 'rehydrate' the client state.\nexport const createStore = reducer => initialState => () => {\n  return Redux.createStore(extractReducer(reducer), initialState)\n}\n\n// To get information about state changes via registered `listeners`.\n// http://redux.js.org/docs/api/Store.html#subscribe\nexport const subscribe = callback => store => () => {\n  store.subscribe(callback)\n  return {}\n}\n\n// Dispatches an action. A Redux-based app never changes its state directly but\n// instead via so-called `actions` / `action creators`\n// http://redux.js.org/docs/api/Store.html#dispatch\nexport const dispatch = action => store => () => {\n  if (action) {\n    return action.value0\n      ? store.dispatch(action.value0)\n      : store.dispatch(action)\n  }\n  return {}\n}\n\n// Returns the current state\n// http://redux.js.org/docs/api/Store.html#getState\nexport const getState = store => () => store.getState()\n\n// For replacing the current reducer.\n// http://redux.js.org/docs/api/Store.html#replaceReducer\nexport const replaceReducer = store => nextReducer => () => {\n  store.replaceReducer(extractReducer(nextReducer))\n}\n\n// For injecting 3rd-party extensions between dispatch and reducer.\n// http://redux.js.org/docs/advanced/Middleware.html\nexport const applyMiddleware = middlewares => reducer => initialState => () => {\n  const all = middlewares.map(extractMiddleware)\n  return Redux.createStore(\n    extractReducer(reducer),\n    initialState,\n    Redux.applyMiddleware.apply(undefined, all)\n  )\n}\n\n// For combining separate `reducing functions` int one reducer\n// http://redux.js.org/docs/api/combineReducers.html\nexport const combineReducers = reducers => () => {\n  return Redux.combineReducers(reducers)\n}\n\nconst extractReducer = reducer => (a, b) => reducer(a)(b)\n\n// The `next` call is the dispatcher call and by default PureScript puts an\n// additional ()-call after its completion (this is how PureScript wrapps\n// effects from JS side). To maintain this extra call on the JS side we wrap the\n// original next(action)-call into an additional function call.\nconst wrapNextDispatch = next => action => () => next(action)\n\n// NOTE: EXPERIMENTAL\n// Create a complete middleware function chain so redux can properly register\n// it. There are three interleaved functions calls: store=>next=>action The\n// `store` is not a complete store but a shrinked version of it containing only:\n// getState & dispatch The `next` is the next dispatch call in the hierarchy The\n// `action` is the next action to be dispatched by the current `next` dispatcher\nconst extractMiddleware = middleware => store => next => action => {\n  return middleware(store)(wrapNextDispatch(next))(action)()\n}\n"]}